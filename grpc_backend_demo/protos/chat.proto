// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";


package grpc_demo;

message UserRequest {
  string id = 1;
}

message UserResponse {
  string id = 1;
  string name = 2;
}

message ServerStreamingOldChatRequest {
  string partnerId = 1;
  int32 message_count = 2;
  int32 message_interval = 3;
}

message ServerStreamingOldChatResponse {
  string userId = 1;
  string userName = 2;
  string message = 3;
}

message CandidateRequest {
  string id = 1;
  int32 queueIndex = 2;
  string status = 3;
}

message CandidateResponse {
  repeated CandidateRequest items = 1;
}

message JoinChanelChatRequest {
  string chanelId = 1;
  int32 userId = 2;
}

message ChanelInfoResponse {
  string userId = 1;
  string userName = 2;
  string message = 3;
}

message ObserveMessageRequest {
  string userId = 1;
  string chanelId = 4;
}

message MessageRequest {
  string userId = 1;
  string userName = 2;
  string message = 3;
  string chanelId = 4;
}

message MessageResponse {
  string userId = 1;
  string userName = 2;
  string message = 3;
  string chanelId = 4;
}

message Empty {}

service ChatService {
  rpc GetName(UserRequest) returns (UserResponse);

  rpc ServerStreamingOldChat(ServerStreamingOldChatRequest) returns (stream ServerStreamingOldChatResponse);

  rpc ClientStreamingCandidate(stream CandidateRequest) returns (CandidateResponse);

  rpc BidirectionalStreamingCandidate(stream CandidateRequest) returns (stream CandidateResponse);


  // chat

  //  rpc joinChanelChat(JoinChanelChatRequest) returns (ChanelInfoResponse);
  //
  //  rpc observeMessage(ObserveMessageRequest) returns (stream MessageResponse);
  //
  //  rpc sendMessage(MessageRequest) returns (Empty);
  // Send sends message to the server
  rpc Send(MessageRequest) returns (Empty) {}

  // Subscribe is streaming method to get echo messages from the server
  rpc Subscribe(ObserveMessageRequest) returns (stream MessageResponse) {}

  // end chat
}
